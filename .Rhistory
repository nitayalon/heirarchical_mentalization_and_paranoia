return(w = (observations <= low | observations > high) * -0.95)
}
weigths(low, high)
!(observations > low & observations <= high)
high
low
!(observations > low & observations <= high) * -0.95
!(observations > low & observations <= high)
!(observations > low & observations <= high) * -0.95
w = !(observations > low & observations <= high) * -0.95
w = !(observations > low & observations <= high)
w * 0.95
w * -0.95
weigths <- function(low, high)
{
w = !(observations > low & observations <= high)
return(w * -0.95)
}
updated_qv <- q_values(eta) + weigths(low, high)
updated_qv
policy <- exp(updated_qv/0.1) / sum(exp(updated_qv/0.1))
sum(policy * observations)
source("~/Max_Planck/Hierarchical-modelling/simulations/simple_tom_zero_plnannig.R", echo=TRUE)
(pl_dom1_offers_dom2 / pl_beliefs_dom1_dom2 + plot_layout(heights = c(5,2))) |
(pl_domminus1_offers_dom2 / pl_beliefs_domminus1_dom2+ plot_layout(heights = c(5,2))) +
plot_layout(guides = "collect") + plot_annotation(tag_levels = "A")
pl_beliefs_dom1_dom2 <-
beliefs %>%
filter(receiver_dom_level == 2 & sender_dom_level == 1 | receiver_dom_level == 2 & sender_dom_level == -1 & sender_threshold == 0,
seed == sid) %>%
mutate(
`P(0.0)` = `X0.0`,
`P(0.1)` = `X0.1`,
`P(0.5)` = `X0.5`
)  %>%
ggplot() +
geom_line(aes(x = trial_number, y = `P(0.0)`, colour='`P(0.0)`'), size=1.0) +
geom_line(aes(x = trial_number, y = `P(0.1)`, colour='`P(0.1)`'), size=1.0) +
geom_line(aes(x = trial_number, y = `P(0.5)`, colour='`P(0.5)`'), size=1.0) +
scale_linetype_manual(values=c("solid", "dotted", "solid"))+
scale_color_manual(
values = custom_colors$sender_type,
name = expression(paste('Sender threshold')),
labels = c("random", "\u03B7 = 0.5" ,"\u03B7 = 0.1")) +
facet_grid(.~sender_threshold)  +
scale_x_continuous(name = 'Trial', breaks = c(0,5,10) ) +
scale_y_continuous(name = "", breaks = c(0,1)) +
ggtitle('Receiver beliefs:\nDoM(2) vs. DoM(1)') +
theme(aspect.ratio = 1) +
guides(color = "none")
library(tidyverse)
library(here)
library(colorspace)
library(caret)
library(patchwork)
library(plotly)
library(ks)
library(ggpubr)
library(rstatix)
library(corrr)
library(emmeans)
library(effsize)
library(ARTool)
library(car)
library(forcats)
# Plotting settings for aliasing on windows
# Enable anti-aliasing on Windows
if(Sys.info()['sysname'] == "Windows"){
trace(grDevices::png, quote({
if (missing(type) && missing(antialias)) {
type <- "cairo-png"
antialias <- "subpixel"
}
}), print = FALSE)
# Enable anti-aliasing on Windows
trace(grDevices:::png, quote({
if (missing(type) && missing(antialias)) {
type <- "cairo-png"
antialias <- "subpixel"
}
}), print = FALSE)
}
# Define general plot style and style
base_size = 15
theme_set(theme_classic(base_size = base_size))
parse_experiment_file <- function(file_name)
{
parameters_list <- strsplit(file_name, "_")[[1]]
alpha = parameters_list[4]
receiver_threshold = parameters_list[7]
sender_threshold = parameters_list[10]
return(c(alpha, receiver_threshold, sender_threshold))
}
library(tidyverse)
library(here)
library(colorspace)
library(caret)
library(patchwork)
library(plotly)
library(ks)
library(ggpubr)
library(rstatix)
library(corrr)
library(emmeans)
library(effsize)
library(ARTool)
library(car)
library(forcats)
results_path = "~/Max_Planck/Hierarchical-modelling/data/first_task/single_rational_agent/"
dom_levels = list(
c("0","-1"),
c("0","1"))
agents_beliefs <- c("receiver_beliefs", "sender_beliefs")
directory_pattern <- "DoM%s_receiver_DoM%s_sender_softmax_temp_0.1"
path_to_game_results <- paste0(results_path, directory_pattern)
game_results <- c()
for(dom_level in dom_levels)
{
receiver_dom_level = dom_level[1]
sender_dom_level = dom_level[2]
path_to_experiments_results <- sprintf(path_to_game_results, receiver_dom_level, sender_dom_level)
path_to_dir <- paste(path_to_experiments_results, "simulation_results" ,sep="/")
temp = list.files(path=path_to_dir, pattern="*.csv")
if (length(temp) == 0)
{
next
}
myfiles = lapply(paste(path_to_dir, temp, sep="/"), read.csv)
interim_results <- bind_rows(myfiles)
game_results <- rbind(game_results, cbind(interim_results, receiver_dom_level, sender_dom_level))
}
beliefs <- c()
for(dom_level in dom_levels)
{
receiver_dom_level = dom_level[1]
sender_dom_level = dom_level[2]
for(agent_name in agents_beliefs)
{
path_to_experiments_results <- sprintf(path_to_game_results, receiver_dom_level, sender_dom_level)
path_to_dir <- paste(path_to_experiments_results, "beliefs" ,sep="/")
updated_path = paste(path_to_dir, agent_name, sep="/")
temp = list.files(path=updated_path, pattern="*.csv")
if (length(temp) == 0)
{
next
}
myfiles = lapply(paste(updated_path, temp, sep="/"), read.csv)
interim_results <- bind_rows(myfiles)
beliefs <- rbind(beliefs, cbind(interim_results, receiver_dom_level, sender_dom_level))
}
}
q_values <- c()
for(dom_level in dom_levels)
{
receiver_dom_level = dom_level[1]
sender_dom_level = dom_level[2]
path_to_experiments_results <- sprintf(path_to_game_results, receiver_dom_level, sender_dom_level)
path_to_dir <- paste(path_to_experiments_results, "q_values" ,sep="/")
temp = list.files(path=path_to_dir, pattern="*.csv")
if (length(temp) == 0)
{
next
}
myfiles = lapply(paste(path_to_dir, temp, sep="/"), read.csv)
interim_results <- bind_rows(myfiles)
issue_list <- sapply(myfiles, function(x){class(x$q_value)})
temp[issue_list == "character"][1]
myfiles[issue_list == "character"][1]
q_values <- rbind(q_values, cbind(interim_results, receiver_dom_level, sender_dom_level))
}
sid = 210
sender_dom_level_for_plot = -1
receiver_dom_level_for_plot = 0
game_plot <- game_results %>%
filter(receiver_dom_level == receiver_dom_level_for_plot,
sender_dom_level == sender_dom_level_for_plot,
seed == sid) %>%
mutate(sender_threshold = factor(sender_threshold),
# response = factor(response, labels = c('reject','accept'))) %>%
response = factor(response, labels = c('accept'))) %>%
mutate(sender_threshold = factor(sender_threshold)) %>%
ggplot(aes(x = trial_number, y = offer)) +
geom_point(aes(shape = factor(response)), size = 1.5) +
geom_line(aes(colour = sender_threshold), alpha=0.5, size = 1.5) +
scale_color_viridis_d(name = expression(paste('Sender threshold')))+
# scale_shape_manual(values=c(4, 15)) +
scale_shape_manual(values=c(15, 4)) +
scale_x_continuous(name="Trial", breaks=seq(0, 20, 1)) +
labs(y = 'Offer', x= 'Trial', shape = "Receiver's response") +
ggtitle('Game results')
belief_plot <- beliefs %>%
filter(receiver_dom_level == receiver_dom_level_for_plot,
sender_dom_level == sender_dom_level_for_plot,
seed == sid) %>%
mutate(`P(0.0)` = `X0.0`,
`P(0.1)` = `X0.1`,
`P(0.5)` = `X0.5`) %>%
ggplot() +
geom_line(aes(x = trial_number, y = `P(0.0)`, colour='`P(0.0)`',
linetype = factor(sender_dom_level)),
size=1.0) +
geom_line(aes(x = trial_number, y = `P(0.1)`, colour='`P(0.1)`',
linetype = factor(sender_dom_level)),
size=1.0) +
geom_line(aes(x = trial_number, y = `P(0.5)`, colour='`P(0.5)`',
linetype = factor(sender_dom_level)),
size=1.0) +
scale_linetype_manual(values=c("solid", "dotted", "solid"))+
scale_color_viridis_d(name = expression(paste('P(',eta, ')')))+
facet_grid(receiver_threshold~sender_threshold) +
scale_x_continuous(name="Trial", breaks=seq(0, 20, 1)) +
labs(y = 'Posterior probability', x= 'Trial') +
ggtitle('Belief update')
library(tidyverse)
library(here)
library(colorspace)
library(caret)
library(patchwork)
library(plotly)
library(ks)
library(ggpubr)
library(rstatix)
library(corrr)
library(emmeans)
library(effsize)
library(ARTool)
library(car)
library(forcats)
sid = 210
sender_dom_level_for_plot = -1
receiver_dom_level_for_plot = 0
game_plot <- game_results %>%
filter(receiver_dom_level == receiver_dom_level_for_plot,
sender_dom_level == sender_dom_level_for_plot,
seed == sid) %>%
mutate(sender_threshold = factor(sender_threshold),
# response = factor(response, labels = c('reject','accept'))) %>%
response = factor(response, labels = c('accept'))) %>%
mutate(sender_threshold = factor(sender_threshold)) %>%
ggplot(aes(x = trial_number, y = offer)) +
geom_point(aes(shape = factor(response)), size = 1.5) +
geom_line(aes(colour = sender_threshold), alpha=0.5, size = 1.5) +
scale_color_viridis_d(name = expression(paste('Sender threshold')))+
# scale_shape_manual(values=c(4, 15)) +
scale_shape_manual(values=c(15, 4)) +
scale_x_continuous(name="Trial", breaks=seq(0, 20, 1)) +
labs(y = 'Offer', x= 'Trial', shape = "Receiver's response") +
ggtitle('Game results')
belief_plot <- beliefs %>%
filter(receiver_dom_level == receiver_dom_level_for_plot,
sender_dom_level == sender_dom_level_for_plot,
seed == sid) %>%
mutate(`P(0.0)` = `X0.0`,
`P(0.1)` = `X0.1`) %>%
ggplot() +
geom_line(aes(x = trial_number, y = `P(0.0)`, colour='`P(0.0)`',
linetype = factor(sender_dom_level)),
size=1.0) +
geom_line(aes(x = trial_number, y = `P(0.1)`, colour='`P(0.1)`',
linetype = factor(sender_dom_level)),
size=1.0) +
scale_linetype_manual(values=c("solid", "dotted", "solid"))+
scale_color_viridis_d(name = expression(paste('P(',eta, ')')))+
facet_grid(receiver_threshold~sender_threshold) +
scale_x_continuous(name="Trial", breaks=seq(0, 20, 1)) +
labs(y = 'Posterior probability', x= 'Trial') +
ggtitle('Belief update')
q_value_plot <- q_values %>%
filter(receiver_dom_level == receiver_dom_level_for_plot,
sender_dom_level == sender_dom_level_for_plot, seed == sid,
# agent == "DoM(2)_receiver") %>%
agent == "DoM(0)_receiver") %>%
mutate(response = factor(action, labels = c('reject','accept'))) %>%
ggplot(aes(trial_number, q_value, colour = factor(sender_threshold))) +
geom_point(aes(shape = response), size=2.0) +
scale_shape_manual(values=c(4, 15)) +
scale_color_viridis_d(name = expression(paste('P(',gamma, ')')))+
labs(y = 'Offer', x= 'Trial', shape = "Receiver's response") +
ggtitle('DoM(0) receiver Q-values')
game_all = game_plot / belief_plot
# ggsave(sprintf("../figures/simulation_illustration_sender_dom_level_%s_receiver_dom_level_%s.png", sender_dom_level_for_plot, receiver_dom_level_for_plot), width = 40, height = 20, units = "cm")
game_all
library(readr)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer <- read_csv("data/first_task/2_rational_agents/short_duration/memoization/DoM_1_unified_memoization_data_softmax_temp_0.1_buffer.csv",
col_names = FALSE)
View(DoM_1_unified_memoization_data_softmax_temp_0_1_buffer)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
str()
library(tidyverse)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
str()
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2))
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>% \
mutate(across(3:10, round, 2)) %>%
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2))
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
arrange(X1, X3, X5)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
arrange(X3, X1, X5)
library(ggplot2)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X3 == 0) %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
arrange(X3, X1, X5)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X3 == 0) %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line()
library(tidyverse)
library(here)
library(colorspace)
library(caret)
library(patchwork)
library(plotly)
library(ks)
library(ggpubr)
library(rstatix)
library(corrr)
library(emmeans)
library(effsize)
library(ARTool)
library(car)
library(forcats)
library(RColorBrewer)
# Plotting settings for aliasing on windows
# Enable anti-aliasing on Windows
if(Sys.info()['sysname'] == "Windows"){
trace(grDevices::png, quote({
if (missing(type) && missing(antialias)) {
type <- "cairo-png"
antialias <- "subpixel"
}
}), print = FALSE)
# Enable anti-aliasing on Windows
trace(grDevices:::png, quote({
if (missing(type) && missing(antialias)) {
type <- "cairo-png"
antialias <- "subpixel"
}
}), print = FALSE)
}
# Define general plot style and style
base_size = 15
theme_set(theme_classic(base_size = base_size))
parse_experiment_file <- function(file_name)
{
parameters_list <- strsplit(file_name, "_")[[1]]
alpha = parameters_list[4]
receiver_threshold = parameters_list[7]
sender_threshold = parameters_list[10]
return(c(alpha, receiver_threshold, sender_threshold))
}
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X3 == 0) %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line()
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X3 == 0) %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(ymin = average_q_value - sd_q_value,
ymax = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X3 == 0) %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(low = average_q_value - sd_q_value,
high = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(low = average_q_value - sd_q_value,
high = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1) +
facet_wrap(~.X3)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(low = average_q_value - sd_q_value,
high = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1) +
facet_grid(~.X3)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(low = average_q_value - sd_q_value,
high = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1) +
facet_grid(.~X3)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X5 > 0) %>%
mutate(across(3:10, round, 2)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(low = average_q_value - sd_q_value,
high = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1) +
facet_grid(.~X3)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X5 > 0)
DoM_1_unified_memoization_data_softmax_temp_0_1_buffer %>%
filter(X5 > 0) %>%
mutate(across(3:10, round, 1)) %>%
group_by(X1, X3, X5, X6, X7, X8, X9, X10) %>%
summarise(average_q_value = mean(X2),
sd_q_value = sd(X2)) %>%
mutate(low = average_q_value - sd_q_value,
high = average_q_value + sd_q_value,) %>%
arrange(X3, X1, X5) %>%
ggplot(aes(x = X1, y = average_q_value, colour = factor(X5))) +
geom_line() +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.1) +
facet_grid(X6~X3)
x <- c(0.95, 0.05/2, 0.05/2)
x
x * c(0.04, 0.04, 0.04)
x * c(0.04, 0.04, 0.04) / sum(x * c(0.04, 0.04, 0.04))
x <- x * c(0.04, 0.04, 0.04) / sum(x * c(0.04, 0.04, 0.04))
x <- x * c(0.04, 0.04, 0.04) / sum(x * c(0.04, 0.04, 0.04))
x <- x * c(0.04, 0.04, 0.04) / sum(x * c(0.04, 0.04, 0.04))
x <- x * c(0.04, 0.04, 0.04) / sum(x * c(0.04, 0.04, 0.04))
x <- x * c(0.04, 0.04, 0.04) / sum(x * c(0.04, 0.04, 0.04))
x
x <- c(0.95, 0.05/2, 0.05/2)
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
x <- x * c(0.04, 0.05, 0.05) / sum(x * c(0.04, 0.05, 0.05))
